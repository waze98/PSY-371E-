{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0a1153e4-b815-4959-9ce6-144ef8833d14",
   "metadata": {},
   "source": [
    "### Data Structures: Indexing and using Methods\n",
    "\n",
    "#### Objective:\n",
    "In this assignment, you'll practice indexing strings, tuples, and lists, \n",
    "including lists of lists. You'll also work with sets and dictionaries to \n",
    "become familiar with basic operations and applications.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc1978d9-1edd-47ae-8f0d-15b4561fef3e",
   "metadata": {},
   "source": [
    "#### 1. Indexing Strings:\n",
    "Given the string `s = \"PYTHON\"`, retrieve and print the following:\n",
    "\n",
    "a) The first character  \n",
    "b) The last character  \n",
    "c) The string \"H\"  \n",
    "d) The `type` of \"H\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3fa00c6-ccf3-4975-94d5-38f25bda5b00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n",
      "N\n",
      "H\n",
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "s = \"PYTHON\"\n",
    "\n",
    "# a)\n",
    "print(s[0])\n",
    "\n",
    "# b) \n",
    "print(s[5])\n",
    "\n",
    "# c)\n",
    "print(s[3])\n",
    "\n",
    "# d)\n",
    "print(type([3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8761617d-95e2-46a3-9bc6-45dac051bee8",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### 2. Indexing Tuples:\n",
    "Given the tuple `t = (10, 20, 30, 40, 50, 60)`, retrieve and print the \n",
    "following:\n",
    "\n",
    "a) The first element  \n",
    "b) The third element \n",
    "c) (Try to) Set the 3rd element to `30.4`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d7fee466-de59-4d45-9032-843a550a5992",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "40\n",
      "tuples are immutable\n"
     ]
    }
   ],
   "source": [
    "# list [], tuple ()\n",
    "t = (10, 20, 30, 40, 50, 60)\n",
    "\n",
    "# a) \n",
    "print(t[0])\n",
    "\n",
    "# b)\n",
    "print(t[3])\n",
    "\n",
    "# c)\n",
    "print(\"tuples are immutable\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66a5fe12-143c-447a-ba97-d494d47543e8",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### 3. Indexing Lists and Lists of Lists:\n",
    "Given the list `lst = [5, 15, 25, [35, 45, [55, 65, 75], 85], 95]`, \n",
    "retrieve and print the following:\n",
    "\n",
    "a) The first element  \n",
    "b) The last element  \n",
    "c) The sublist `[55, 65, 75]`\n",
    "d) The number `65`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d37117ed-f0d0-4306-a62e-a10179f0e8d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "95\n",
      "[55, 65, 75]\n"
     ]
    }
   ],
   "source": [
    "lst = [5, 15, 25, [35, 45, [55, 65, 75], 85], 95]\n",
    "# a) \n",
    "print(lst[0])\n",
    "\n",
    "# b)\n",
    "print(lst[4])\n",
    "\n",
    "# c)\n",
    "print(lst[3][2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4386e2e6-c255-4f0d-8666-edc7fd206318",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### 4. Lists of Lists as Arrays:\n",
    "Consider a 3x3 matrix represented as a list of lists:\n",
    "\n",
    "```python\n",
    "matrix = [\n",
    "    [1, 2, 3],\n",
    "    [4, 5, 6],\n",
    "    [7, 8, 9]\n",
    "]\n",
    "```\n",
    "\n",
    "a) Retrieve the second row.  \n",
    "b) Retrieve the third column.  \n",
    "c) Change the center element to 0 and print the modified matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "8aabc905-30c6-4a0e-8267-e0f5b64c6bc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 5, 6]\n",
      "[3, 6, 9]\n",
      "\n",
      " [1, 2, 3] \n",
      " [4, 0, 6] \n",
      " [7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "# matrix[row index][column index]\n",
    "\n",
    "matrix = [\n",
    "    [1, 2, 3],\n",
    "    [4, 5, 6],\n",
    "    [7, 8, 9]\n",
    "]\n",
    "\n",
    "# a)\n",
    "print(matrix[1])\n",
    "\n",
    "# b) \n",
    "third_column = [row[2] for row in matrix]\n",
    "print(third_column)\n",
    "\n",
    "# c)\n",
    "matrix[1][1] = 0\n",
    "print(\"\\n\", matrix[0], \"\\n\", matrix[1], \"\\n\", matrix[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56902c29-51ec-44da-8a3a-12af3a3ca3b9",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### 5. Using Sets:\n",
    "Given two lists `A = [1, 2, 2, 3, 4, 4, 5]` and `B = [4, 5, 5, 6, 7, 7, \n",
    "8]`:\n",
    "\n",
    "a) Create sets from both lists.  \n",
    "b) Find the union of the two sets.  \n",
    "c) Find the intersection of the two sets.  \n",
    "d) Find the elements that are in A but not in B.\n",
    "e) Find the elements that are in A or B but not both."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "8d010ffe-7c9a-4e87-99de-93e36dc90292",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5}\n",
      "{4, 5, 6, 7, 8}\n"
     ]
    }
   ],
   "source": [
    "A = [1, 2, 2, 3, 4, 4, 5]\n",
    "B = [4, 5, 5, 6, 7, 7,  8]\n",
    "\n",
    "\n",
    "# a)\n",
    "set_1 = {1, 2, 2, 3, 4, 4, 5}\n",
    "print(set_1)\n",
    "\n",
    "set_2 = {4, 5, 5, 6, 7, 7,  8}\n",
    "print(set_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "aad765d0-4a18-410e-b425-849d892a692b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 6, 7, 8}"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# b)\n",
    "# | union\n",
    "set_1 | set_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "651bb1f2-95bf-4e22-bcf5-09c6f7abb066",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{4, 5}"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# c)\n",
    "# & intersection\n",
    "set_1 & set_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d3fa8a27-8a51-4dd6-b76a-3a78e792d7c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3}"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# d)\n",
    "# - difference\n",
    "set_1 - set_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2e99a77e-0c7a-49e9-89aa-02456ffdf84e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 6, 7, 8}"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# e) \n",
    "# ^ symmetric difference \n",
    "set_1 ^ set_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68373b69-aebf-4dd7-ab85-ae14cd2ce7ea",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### 6. Working with Dictionaries:\n",
    "Consider the following dictionary that represents the stock of items in a \n",
    "store:\n",
    "\n",
    "```python\n",
    "stock = {\n",
    "    \"apple\": 50,\n",
    "    \"banana\": 25,\n",
    "    \"orange\": 30,\n",
    "    \"grape\": 45\n",
    "}\n",
    "```\n",
    "\n",
    "a) Retrieve the stock of `apple`.  \n",
    "b) Add a new fruit, `pear`, with a stock of 40.  \n",
    "c) Update the stock of `banana` to 30.  \n",
    "d) Remove `orange` from the stock.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "10d8d820-d7f4-41db-883a-440b6bd62bd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n",
      "Result: {'apple': 50, 'banana': 30, 'grape': 45, 'pear': 40}\n"
     ]
    }
   ],
   "source": [
    "stock = {\n",
    "    \"apple\": 50,\n",
    "    \"banana\": 25,\n",
    "    \"orange\": 30,\n",
    "    \"grape\": 45\n",
    "}\n",
    "\n",
    "# a)\n",
    "print(stock[\"apple\"])\n",
    "\n",
    "# b)\n",
    "stock[\"pear\"] = 40\n",
    "\n",
    "# c)\n",
    "stock[\"banana\"] = 30\n",
    "\n",
    "# d)\n",
    "del stock[\"orange\"] \n",
    "\n",
    "# dictionary updates result\n",
    "print(\"Result:\", stock)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
